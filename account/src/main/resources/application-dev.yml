

spring:
  application:
    name: account-provider
  datasource:
    name: dev
    url: jdbc:mysql://121.42.145.216:3306/biu?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: root
#    password: ENC(jLsYb6iWiRX88MJ5HfzP9w==)
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    platform: mysql
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    # druid 配置: https://github.com/alibaba/druid/wiki/
    initialSize: 1
    minIdle: 1
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
    # 配置监控统计拦截的filters，stat用于监控界面，'wall'用于防火墙防御sql注入, slf4j用于druid记录sql日志
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: false

    # redis
  redis:
    # 服务器IP地址
    host: 127.0.0.1
    # 连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password:

    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 800
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 10000
        # 连接池中的最大空闲连接
        max-idle: 20
        # 连接池中的最小空闲连接
        min-idle: 2
        # 连接超时时间（毫秒）
        timeout: 30000
  cache:
    type: redis

# dubbo
dubbo :
  application :
    id: account-provider
    name: account-provider
    qos-enable: false
    qos-port: 22222
  protocol:
    port: -1
    name: dubbo

#    status: server
  registry:
    address: zookeeper://127.0.0.1:2181
#    id: admin-provider
  scan:
    basePackages: com.melody.service
management:
  # Dubbo Health
  health:
    dubbo:
      status:
        extras: load,threadpool
pagehelper:
  helperDialect: mysql
  # 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页
  reasonable: true
  # 支持通过Mapper接口参数来传递分页参数
  supportMethodsArguments: true
  params: count=countSql
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.melody.user.dto
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    #refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    # Sequence序列接口实现类配置
    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 1
    logic-not-delete-value: 0
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
#    jdbc-type-for-null: 'null'
#
mybatis:
  configuration:
    # 开启驼峰命名转换 Table(create_time) -> Entity(createTime)
    map-underscore-to-camel-case: true
    # 使用JDBC的getGeneratedKeys获取数据库自增主键值
    useGeneratedKeys: false
  # 指向实体类包路径
    type-aliases-package: com.melody

  config-location: classpath:resources/mybatis-config.xml
  mapper-locations: classpath:/mapper/*Mapper.xml




